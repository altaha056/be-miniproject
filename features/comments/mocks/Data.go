// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	comments "antonio/features/comments"

	mock "github.com/stretchr/testify/mock"
)

// Data is an autogenerated mock type for the Data type
type Data struct {
	mock.Mock
}

// AddComment provides a mock function with given fields: content, articleId, userId
func (_m *Data) AddComment(content string, articleId int, userId int) error {
	ret := _m.Called(content, articleId, userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int, int) error); ok {
		r0 = rf(content, articleId, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteComment provides a mock function with given fields: commentId
func (_m *Data) DeleteComment(commentId int) error {
	ret := _m.Called(commentId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(commentId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetArticleComments provides a mock function with given fields: articleId
func (_m *Data) GetArticleComments(articleId int) ([]comments.Core, error) {
	ret := _m.Called(articleId)

	var r0 []comments.Core
	if rf, ok := ret.Get(0).(func(int) []comments.Core); ok {
		r0 = rf(articleId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]comments.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(articleId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateComment provides a mock function with given fields: commentId, content
func (_m *Data) UpdateComment(commentId int, content string) error {
	ret := _m.Called(commentId, content)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string) error); ok {
		r0 = rf(commentId, content)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VerifyCommentOwner provides a mock function with given fields: commentId, userId
func (_m *Data) VerifyCommentOwner(commentId int, userId int) error {
	ret := _m.Called(commentId, userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(commentId, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
