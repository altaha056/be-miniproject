// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	appreciate "antonio/features/appreciate"

	mock "github.com/stretchr/testify/mock"
)

// Data is an autogenerated mock type for the Data type
type Data struct {
	mock.Mock
}

// Downvote provides a mock function with given fields: articleId, userId
func (_m *Data) Downvote(articleId int, userId int) error {
	ret := _m.Called(articleId, userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(articleId, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Rating provides a mock function with given fields: userId
func (_m *Data) Rating(userId int) ([]appreciate.ArticleCore, error) {
	ret := _m.Called(userId)

	var r0 []appreciate.ArticleCore
	if rf, ok := ret.Get(0).(func(int) []appreciate.ArticleCore); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]appreciate.ArticleCore)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upvote provides a mock function with given fields: articleId, userId
func (_m *Data) Upvote(articleId int, userId int) error {
	ret := _m.Called(articleId, userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(articleId, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WhoVote provides a mock function with given fields: articleId
func (_m *Data) WhoVote(articleId int) ([]appreciate.UserCore, error) {
	ret := _m.Called(articleId)

	var r0 []appreciate.UserCore
	if rf, ok := ret.Get(0).(func(int) []appreciate.UserCore); ok {
		r0 = rf(articleId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]appreciate.UserCore)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(articleId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
